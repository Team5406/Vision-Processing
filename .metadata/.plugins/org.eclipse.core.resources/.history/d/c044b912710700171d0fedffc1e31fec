package org.usfirst.frc.team5406.vision;

import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.core.MatOfPoint;
import org.opencv.core.MatOfPoint2f;
import org.opencv.core.Point;
import org.opencv.core.Rect;
import org.opencv.core.RotatedRect;
import org.opencv.core.Scalar;
import org.opencv.imgproc.Imgproc;
import org.usfirst.frc.team5406.robot.Robot;

import edu.wpi.cscore.CvSource;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.vision.VisionRunner.Listener;


public class CeltXListener implements Listener<GripPipelineM1004>{

	CvSource output;
	
	public CeltXListener()
	{
		super();
		
		output = CameraServer.getInstance().putVideo("Countour", 480, 320);
		
	}
	
	@Override
	public void copyPipelineOutputs(GripPipelineM1004 pipeline) {
		
		Mat contourFrame = pipeline.hsvThresholdOutput();
		
		SmartDashboard.putNumber("Rand", Math.random());
		
		if(!pipeline.findContoursOutput().isEmpty()) {
			//Creates a rectangle for the Contour
            
 
            MatOfPoint2f smallContour = new MatOfPoint2f();
            MatOfPoint2f bigContour = new MatOfPoint2f();
            
            int small = 0;
            
            for(int i = 0; i < pipeline.findContoursOutput().size(); i++)
            	if(Imgproc.boundingRect(pipeline.findContoursOutput().get(i)).width > 5)
            	{
            		small = i;
            		break;
            	}
            
            
            
            pipeline.findContoursOutput().get(small).convertTo(smallContour, CvType.CV_32F);
            
            Rect r = Imgproc.boundingRect(pipeline.findContoursOutput().get(small));
            
            int big = 0;
            
            for(int i = small + 1; i < pipeline.findContoursOutput().size(); i++)
            	if(Imgproc.boundingRect(pipeline.findContoursOutput().get(i)).width < 5)
            	{
            		big = i;
            		break;
            	}
            pipeline.findContoursOutput().get(big).convertTo(bigContour, CvType.CV_32F);
            
            if(bigContour.size().width < smallContour.size().width)
            {
            	MatOfPoint2f temp = bigContour;
            	bigContour = smallContour;
            	smallContour = temp;
            }
            
            RotatedRect smallRect = Imgproc.minAreaRect(smallContour);
            RotatedRect bigRect = Imgproc.minAreaRect(bigContour);
            
            Point smallRectVertices[] = new Point[4];
            Point bigRectVertices[] = new Point[4];
            
            smallRect.points(smallRectVertices);
            bigRect.points(bigRectVertices);
            
            //Finds the value of the center of the Tape
            Robot.centerX = (double) (r.x + (r.width / 2));
            
            SmartDashboard.putString("Dimensions", pipeline.hsvThresholdOutput().size().height + ", " + pipeline.hsvThresholdOutput().size().width);
            
            SmartDashboard.putNumber("VWidth", r.x);
            SmartDashboard.putNumber("VHeight", r.y);
            SmartDashboard.putNumber("VTape Y", r.y);
            
            SmartDashboard.putNumber("RWidth", bigRect.size.width);
            SmartDashboard.putNumber("RHeight", bigRect.size.height);
            SmartDashboard.putNumber("RAngle", bigRect.angle);
            
            for(int i = 0; i < 4; i++)
            	SmartDashboard.putString("Vertex " + i, bigRectVertices[i].x + ", " + bigRectVertices[i].y);
            
            SmartDashboard.putBoolean("isTapeVisible", true);
            
            
            /*
             * Camera filters
             * 
             * Color Level: 100
             * Brightness: 50
             * Sharpness: 50
             * Contrast: 100
             * 
             * White Balance: Fixed Indoor
             * 
             * Exposure: 4
             * 
             * Backlight: false
             */
            SmartDashboard.putNumber("Contour #", pipeline.findContoursOutput().size());
            
            for(int i = 0; i < 4; i++)
            	Imgproc.line(contourFrame, smallRectVertices[i], smallRectVertices[(i + 1) % 4], new Scalar(255, 0, 0), 1, 8, 0);
            
            for(int i = 0; i < 4; i++)
            	Imgproc.line(contourFrame, bigRectVertices[i], bigRectVertices[(i + 1) % 4], new Scalar(255, 0, 0), 1, 8, 0);
            /*contourWidth = r.width;
            
            imageWidth = (BOILER_DIAMETER / contourWidth) * CAMERA_WIDTH;
            contourDistance = (imageWidth / 2) / (Math.tan(WIDTH_ANGLE));
            
            distance = Math.cos(CAMERA_ANGLE) * contourDistance;
            
            SmartDashboard.putNumber("Image Width", imageWidth);
            SmartDashboard.putNumber("ContourDistance", contourDistance);
            SmartDashboard.putNumber("Distance", distance);*/
            
            
        }
		else
		{
			Robot.centerX = 0;
			SmartDashboard.putBoolean("isTapeVisible", false);
		}
		
		
		output.putFrame(contourFrame);
	}
	


}
